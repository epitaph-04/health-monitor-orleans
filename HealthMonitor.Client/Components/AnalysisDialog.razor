@using System.Text.Json
@inject HttpClient Http

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Class="mr-2"/> AI Incident Analysis
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_isAnalyzing)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Class="mt-4">Analyzing incident data...</MudText>
        }
        else
        {
            <MudText Typo="Typo.body1">@((MarkupString)_analysisResult)</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => MudDialog.Close()">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Prompt { get; set; }

    private bool _isAnalyzing = true;
    private string _analysisResult = "";

    protected override async Task OnInitializedAsync()
    {
        _analysisResult = await CallGeminiApi(Prompt);
        _isAnalyzing = false;
        StateHasChanged();
    }
    
    private async Task<string> CallGeminiApi(string prompt)
    {
        var apiKey = ""; // Canvas will provide the key
        var apiUrl = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key={apiKey}";
        
        var payload = new { contents = new[] { new { parts = new[] { new { text = prompt } } } } };

        try
        {
            var response = await Http.PostAsJsonAsync(apiUrl, payload);
            if (!response.IsSuccessStatusCode)
            {
                return $"<p>Error: API call failed with status code {response.StatusCode}</p>";
            }
            var result = await response.Content.ReadFromJsonAsync<JsonElement>();
            return result.GetProperty("candidates")[0].GetProperty("content").GetProperty("parts")[0].GetProperty("text").GetString() ?? "<p>No response text found.</p>";
        }
        catch (Exception ex)
        {
            return $"<p>Error: Could not get analysis from AI. {ex.Message}</p>";
        }
    }
}
