@using HealthMonitor.Client.Model
@using HealthMonitor.Client.Service
@inject DashboardService DashboardService
@inject ISnackbar Snackbar

<MudCard Elevation="4" Style="height: 100%;">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Filters</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="Icons.Material.Filled.FilterList" Color="Color.Primary" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Style="height: calc(100% - 80px); overflow-y: auto;">
        <!-- Time Range Selector -->
        <MudStack Class="mb-4">
            <MudText Typo="Typo.subtitle2">Time Range</MudText>
            <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small" OverrideStyles="false">
                <MudButton OnClick="@(() => OnTimeRangeChanged.InvokeAsync(1))"
                          Variant="@(SelectedHours == 1 ? Variant.Filled : Variant.Outlined)"
                          Color="Color.Primary">
                    1H
                </MudButton>
                <MudButton OnClick="@(() => OnTimeRangeChanged.InvokeAsync(24))"
                          Variant="@(SelectedHours == 24 ? Variant.Filled : Variant.Outlined)"
                          Color="Color.Primary">
                    24H
                </MudButton>
                <MudButton OnClick="@(() => OnTimeRangeChanged.InvokeAsync(168))"
                          Variant="@(SelectedHours == 168 ? Variant.Filled : Variant.Outlined)"
                          Color="Color.Primary">
                    7D
                </MudButton>
                <MudButton OnClick="@(() => OnTimeRangeChanged.InvokeAsync(720))"
                          Variant="@(SelectedHours == 720 ? Variant.Filled : Variant.Outlined)"
                          Color="Color.Primary">
                    30D
                </MudButton>
            </MudButtonGroup>
        </MudStack>

        <!-- Service Filter -->
        <MudStack>
            <MudText Typo="Typo.subtitle2">Services</MudText>
            <MudTextField @bind-Value="_serviceSearchText"
                         Placeholder="Search services..."
                         Adornment="Adornment.Start"
                         AdornmentIcon="Icons.Material.Filled.Search"
                         Immediate="true"
                         Clearable="true" />

            <!-- Select/Deselect All -->
            <MudStack Row Justify="Justify.SpaceBetween" Class="mb-2">
                <MudButton Size="Size.Small"
                          OnClick="SelectAllServices"
                          StartIcon="Icons.Material.Filled.CheckBox"
                          Variant="Variant.Text">
                    Select All
                </MudButton>
                <MudButton Size="Size.Small"
                          OnClick="DeselectAllServices"
                          StartIcon="Icons.Material.Filled.CheckBoxOutlineBlank"
                          Variant="Variant.Text">
                    Clear All
                </MudButton>
            </MudStack>

            <MudList T="string" Dense>
                @foreach (var service in FilteredServices)
                {
                    <MudListItem>
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudCheckBox Checked="service.IsSelected"
                                        Color="Color.Primary"
                                        Dense="true"
                                        Label="@service.ServiceId"
                                        CheckedChanged="@(async (bool isChecked) => { service.IsSelected = isChecked; await OnServiceSelectionChanged.InvokeAsync(ServiceFilters); })" />
                            <MudChip T="string" Size="Size.Small"
                                    Color="@service.StatusColor"
                                    Variant="Variant.Filled">
                                @GetServiceStatusText(service.ServiceId)
                            </MudChip>
                        </MudStack>
                    </MudListItem>
                }
            </MudList>
        </MudStack>

        <!-- Filter Summary -->
        <MudDivider Class="my-3" />
        <MudAlert Severity="Severity.Info" Dense="true">
            <MudText Typo="Typo.body2">
                @($"{ServiceFilters?.Count(s => s.IsSelected) ?? 0} of {ServiceFilters?.Count ?? 0} services selected")
            </MudText>
        </MudAlert>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public List<ServiceFilter>? ServiceFilters { get; set; }
    [Parameter] public int SelectedHours { get; set; } = 24;
    [Parameter] public EventCallback<int> OnTimeRangeChanged { get; set; }
    [Parameter] public EventCallback<List<ServiceFilter>> OnServiceSelectionChanged { get; set; }

    private string _serviceSearchText = "";

    private List<ServiceFilter> FilteredServices =>
        ServiceFilters?.Where(s => string.IsNullOrEmpty(_serviceSearchText) ||
                               s.ServiceId.Contains(_serviceSearchText, StringComparison.OrdinalIgnoreCase))
                      .ToList() ?? new List<ServiceFilter>();

    private async Task SelectAllServices()
    {
        if (ServiceFilters == null) return;

        foreach (var service in FilteredServices)
        {
            service.IsSelected = true;
        }

        await OnServiceSelectionChanged.InvokeAsync(ServiceFilters);
    }

    private async Task DeselectAllServices()
    {
        if (ServiceFilters == null) return;

        foreach (var service in FilteredServices)
        {
            service.IsSelected = false;
        }

        await OnServiceSelectionChanged.InvokeAsync(ServiceFilters);
    }

    private string GetServiceStatusText(string serviceId)
    {
        // This would typically come from real service status
        return "Online";
    }
}