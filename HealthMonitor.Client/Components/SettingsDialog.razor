<MudDialog @bind-IsOpen="IsOpen" Options="@_dialogOptions">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Dashboard Settings</MudText>
        
        <MudStack Spacing="4">
            <!-- Auto-refresh Settings -->
            <MudCard Variant="Variant.Outlined">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.subtitle1">Auto-refresh</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="3">
                        <MudSlider T="int" 
                                  @bind-Value="_refreshInterval" 
                                  Min="10" 
                                  Max="300" 
                                  Step="10"
                                  TickMarks="true">
                            Refresh Interval: @(_refreshInterval)s
                        </MudSlider>
                        
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Lower values provide more real-time data but may impact performance
                        </MudText>
                    </MudStack>
                </MudCardContent>
            </MudCard>

            <!-- Display Settings -->
            <MudCard Variant="Variant.Outlined">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.subtitle1">Display Options</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="2">
                        <MudCheckBox T="string" @bind-Checked="_showPredictions" Label="Show Predictions Tab" />
                        <MudCheckBox T="string" @bind-Checked="_showAnomalies" Label="Show Anomaly Detection" />
                        <MudCheckBox T="string" @bind-Checked="_enableSounds" Label="Enable Alert Sounds" />
                        <MudCheckBox T="string" @bind-Checked="_compactMode" Label="Compact Mode" />
                    </MudStack>
                </MudCardContent>
            </MudCard>

            <!-- Alert Settings -->
            <MudCard Variant="Variant.Outlined">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.subtitle1">Alert Thresholds</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="3">
                        <MudNumericField @bind-Value="_healthThreshold" 
                                        Label="Health Score Alert Threshold (%)"
                                        Min="0" Max="100" Step="5" />
                        
                        <MudNumericField @bind-Value="_responseTimeThreshold" 
                                        Label="Response Time Alert Threshold (ms)"
                                        Min="100" Max="5000" Step="100" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudStack>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Save">
            Save Settings
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public int RefreshInterval { get; set; } = 30;
    [Parameter] public EventCallback<int> OnRefreshIntervalChanged { get; set; }

    private int _refreshInterval = 30;
    private bool _showPredictions = true;
    private bool _showAnomalies = true;
    private bool _enableSounds = false;
    private bool _compactMode = false;
    private double _healthThreshold = 85;
    private int _responseTimeThreshold = 1000;

    private DialogOptions _dialogOptions = new()
    {
        MaxWidth = MaxWidth.Small,
        FullWidth = true
    };

    protected override void OnParametersSet()
    {
        _refreshInterval = RefreshInterval;
    }

    private async Task Save()
    {
        await OnRefreshIntervalChanged.InvokeAsync(_refreshInterval);
        await IsOpenChanged.InvokeAsync(false);
    }

    private async Task Cancel()
    {
        _refreshInterval = RefreshInterval; // Reset to original value
        await IsOpenChanged.InvokeAsync(false);
    }
}