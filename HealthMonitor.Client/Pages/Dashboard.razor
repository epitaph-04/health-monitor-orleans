@page "/dashboard"
@using HealthMonitor.Model
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Health Monitor - Dashboard</PageTitle>

<div class="min-h-screen bg-slate-50">
    <!-- Header -->
    <div class="bg-slate-100 shadow-md">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-6">
                <h1 class="text-3xl font-bold text-slate-700">System Health Dashboard</h1>
                <div class="flex items-center space-x-4">
                    <div class="flex items-center space-x-2">
                        <div class="w-3 h-3 rounded-full @(_isConnected ? "bg-green-400" : "bg-red-400")"></div>
                        <span class="text-sm text-gray-600">@(_isConnected ? "Connected" : "Disconnected")</span>
                    </div>
                    <span class="text-sm text-slate-600">Last updated: @_lastUpdated.ToString("HH:mm:ss")</span>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        <!-- Health Overview Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-green-100 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Healthy Services</dt>
                            <dd class="text-lg font-medium text-gray-900">@_healthyCount</dd>
                        </dl>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-yellow-100 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Degraded Services</dt>
                            <dd class="text-lg font-medium text-gray-900">@_degradedCount</dd>
                        </dl>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-red-100 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-red-600" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Critical Services</dt>
                            <dd class="text-lg font-medium text-gray-900">@_criticalCount</dd>
                        </dl>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-blue-100 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Overall Health Score</dt>
                            <dd class="text-lg font-medium text-gray-900">@(_overallHealthScore.ToString("F1"))%</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            <!-- Services List -->
            <div class="lg:col-span-2">
                <div class="bg-white shadow-md rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-medium text-gray-900">Services Status</h3>
                    </div>
                    <div class="divide-y divide-gray-200">
                        @if (_services != null)
                        {
                            @foreach (var service in _services.Take(10))
                            {
                                <div class="px-6 py-4 hover:bg-gray-50 cursor-pointer" @onclick="() => NavigateToService(service.Id)">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0">
                                                <div class="w-3 h-3 rounded-full @GetStatusColor(service.LastCheckStatus.Status)"></div>
                                            </div>
                                            <div class="ml-4">
                                                <p class="text-sm font-medium text-gray-900">@service.Name</p>
                                                <p class="text-sm text-gray-500">@service.ServiceType</p>
                                            </div>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-sm font-medium text-gray-900">@service.LastCheckStatus.ResponseTime.Milliseconds ms</p>
                                            <p class="text-sm text-gray-500">@service.LastCheckStatus.LastCheckedUtc.ToShortTimeString()</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <div class="px-6 py-3 border-t border-gray-200">
                        <a href="/services" class="text-sm font-medium text-blue-600 hover:text-blue-500">
                            View all services â†’
                        </a>
                    </div>
                </div>
            </div>

            <!-- Quick Actions & Insights -->
            <div class="space-y-6">
                
                <!-- Quick Actions -->
                <div class="bg-white shadow-md rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-medium text-gray-900">Quick Actions</h3>
                    </div>
                    <div class="px-6 py-4 space-y-3">
                        <button @onclick="NavigateToAnalytics" 
                                class="w-full flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                            View Analytics
                        </button>
                        <button @onclick="NavigateToAlerts" 
                                class="w-full flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            Manage Alerts
                        </button>
                        <button @onclick="NavigateToDependencies" 
                                class="w-full flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            View Dependencies
                        </button>
                    </div>
                </div>
                
                <!-- Recent Alerts -->
                <div class="bg-white shadow-md rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-medium text-gray-900">Recent Alerts</h3>
                    </div>
                    <div class="px-6 py-4">
                        @* @if (_recentAlerts.Any()) *@
                        @* { *@
                        @*     <div class="space-y-3"> *@
                        @*         @foreach (var alert in _recentAlerts.Take(5)) *@
                        @*         { *@
                        @*             <div class="flex items-start space-x-3"> *@
                        @*                 <div class="flex-shrink-0"> *@
                        @*                     <div class="w-2 h-2 rounded-full @GetAlertColor(alert.Level) mt-2"></div> *@
                        @*                 </div> *@
                        @*                 <div class="min-w-0 flex-1"> *@
                        @*                     <p class="text-sm font-medium text-gray-900">@alert.ServiceId</p> *@
                        @*                     <p class="text-sm text-gray-500">@alert.Message</p> *@
                        @*                     <p class="text-xs text-gray-400">@alert.Timestamp.ToString("HH:mm")</p> *@
                        @*                 </div> *@
                        @*             </div> *@
                        @*         } *@
                        @*     </div> *@
                        @* } *@
                        @* else *@
                        @* { *@
                        @*     <p class="text-sm text-gray-500">No recent alerts</p> *@
                        @* } *@
                    </div>
                </div>

                <!-- System Health Trend -->
                <div class="bg-white shadow-md rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <div class="flex justify-between items-center">
                            <h3 class="text-lg font-medium text-gray-900">Health Trend</h3>
                            <button @onclick="RefreshHealthTrend" 
                                    class="text-sm text-blue-600 hover:text-blue-800 flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                </svg>
                                Refresh
                            </button>
                        </div>
                    </div>
                    @* <div class="px-6 py-4"> *@
                    @*     @if (_isLoadingTrend) *@
                    @*     { *@
                    @*         <div class="flex items-center justify-center h-48"> *@
                    @*             <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div> *@
                    @*             <span class="ml-2 text-sm text-gray-500">Loading trend data...</span> *@
                    @*         </div> *@
                    @*     } *@
                    @*     else *@
                    @*     { *@
                    @*         <canvas id="healthTrendChart" width="300" height="200"></canvas> *@
                    @*     } *@
                    @* </div> *@
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? _hubConnection;
    private Service[]? _services;
    private bool _isConnected;
    private DateTime _lastUpdated = DateTime.Now;
    
    private int _healthyCount;
    private int _degradedCount;
    private int _criticalCount;
    private double _overallHealthScore;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        await SetupSignalRConnection();
    }

    private async Task LoadInitialData()
    {
        try
        {
            var response = await Http.GetAsync(NavigationManager.ToAbsoluteUri("/api/healthcheck/services"));
            if (response.IsSuccessStatusCode)
            {
                _services = await response.Content.ReadFromJsonAsync<Service[]>();
                UpdateHealthCounts();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading initial data: {ex.Message}");
        }
    }

    private async Task SetupSignalRConnection()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notification"))
            .Build();

        _hubConnection.On<string, HealthCheckResult>("ReceiveNotification", (id, checkResult) =>
        {
            if (_services == null) return;
            var index = Array.FindIndex(_services, s => s.Id == id);
            if (index < 0) return;
            var service = _services[index] with { LastCheckStatus = checkResult };
            _services[index] = service;
            UpdateHealthCounts();
            _lastUpdated = DateTime.Now;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        _isConnected = _hubConnection.State == HubConnectionState.Connected;
    }

    private void UpdateHealthCounts()
    {
        if (_services == null) return;

        _healthyCount = _services.Count(s => s.LastCheckStatus.Status == Status.Healthy);
        _degradedCount = _services.Count(s => s.LastCheckStatus.Status == Status.Degraded);
        _criticalCount = _services.Count(s => s.LastCheckStatus.Status == Status.Critical);
        
        _overallHealthScore = _services.Length > 0 ? (double)_healthyCount / _services.Length * 100 : 0;
    }

    private string GetStatusColor(Status status)
    {
        return status switch
        {
            Status.Healthy => "bg-green-400",
            Status.Degraded => "bg-yellow-400", 
            Status.Critical => "bg-red-400",
            _ => "bg-gray-400"
        };
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
    
    private void NavigateToService(string serviceId)
    {
        NavigationManager.NavigateTo($"/services/{serviceId}");
    }
    
    private void NavigateToAnalytics()
    {
        NavigationManager.NavigateTo("/analytics");
    }
    
    private void NavigateToAlerts()
    {
        NavigationManager.NavigateTo("/alerts");
    }

    private void NavigateToDependencies()
    {
        NavigationManager.NavigateTo("/dependencies");
    }
    
    private async Task RefreshHealthTrend()
    {
        await Task.CompletedTask;
    }
}
