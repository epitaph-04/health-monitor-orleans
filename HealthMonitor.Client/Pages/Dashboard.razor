@page "/"
@using HealthMonitor.Client.Components
@using HealthMonitor.Model
@using HealthMonitor.Model.Analytics
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<Dashboard> Logger
@implements IAsyncDisposable

<PageTitle>Health Monitor - Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8">

    <!-- Header -->
    <MudPaper Elevation="1" Class="d-flex justify-space-between align-center pa-4 mb-8" Color="Color.Transparent">
        <MudText Typo="Typo.h4" GutterBottom="true">System Health Dashboard</MudText>
        <div class="d-flex align-center">
            <MudChip T="string" Icon="@(_isConnected ? Icons.Material.Filled.Wifi : Icons.Material.Filled.WifiOff)" 
                     Color="@(_isConnected ? Color.Success : Color.Error)" 
                     Variant="Variant.Text">
                @(_isConnected ? "Connected" : "Disconnected")
            </MudChip>
            <MudText Typo="Typo.body2" Class="ml-4">Last updated: @_lastUpdated.ToString("HH:mm:ss")</MudText>
        </div>
    </MudPaper>

    <!-- Health Overview Cards -->
    <MudGrid Spacing="4" Class="mb-8">
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="d-flex">
                        <MudAvatar Color="Color.Success" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.Rounded.CheckCircle" />
                        </MudAvatar>
                        <div class="ml-4">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Healthy Services</MudText>
                            <MudText Typo="Typo.h5" Class="font-weight-bold">@_healthyCount</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="d-flex">
                        <MudAvatar Style="background-color: var(--mud-palette-warning-light);" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.TwoTone.Warning" Color="Color.Warning" />
                        </MudAvatar>
                        <div class="ml-4">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Degraded Services</MudText>
                            <MudText Typo="Typo.h5" Class="font-weight-bold">@_degradedCount</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="d-flex">
                        <MudAvatar Color="Color.Error" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.TwoTone.Cancel" />
                        </MudAvatar>
                        <div class="ml-4">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Critical Services</MudText>
                            <MudText Typo="Typo.h5" Class="font-weight-bold">@_criticalCount</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="d-flex">
                        <MudAvatar Color="Color.Primary" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.TwoTone.Speed" />
                        </MudAvatar>
                        <div class="ml-4">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Overall Health Score</MudText>
                            <MudText Typo="Typo.h5" Class="font-weight-bold">@(_overallHealthScore.ToString("F1"))%</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Main Content Grid -->
    <MudGrid Spacing="4">
        <!-- Services List -->
        <MudItem xs="12" lg="8">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Services Status</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="pa-0">
                    <MudList T="string" Clickable="true">
                        @if (_services != null)
                        {
                            @foreach (var service in _services.Take(10))
                            {
                                <MudListItem T="string" OnClick="@(() => NavigateToService(service.Id))">
                                    <div class="d-flex justify-space-between w-100 align-center">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.TwoTone.Circle" Color="@GetStatusColor(service.LastCheckStatus.Status)" Class="mr-3" />
                                            <div>
                                                <MudText>@service.Name</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">@service.ServiceType</MudText>
                                            </div>
                                        </div>
                                        <div class="text-right">
                                            <MudText class="text-right" Typo="Typo.body2">@service.LastCheckStatus.ResponseTime.Milliseconds ms</MudText>
                                            <MudText class="text-right" Typo="Typo.caption" Color="Color.Secondary">@service.LastCheckStatus.CheckedTimeUtc.ToShortTimeString()</MudText>
                                        </div>
                                    </div>
                                </MudListItem>
                            }
                        }
                    </MudList>
                </MudCardContent>
                <MudCardActions >
                    <MudButton Href="/services" Color="Color.Primary" Variant="Variant.Text">View all services</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <!-- Quick Actions & Insights -->
        <MudItem xs="12" lg="4">
            <MudStack Spacing="4">
                <MudCard Elevation="2">
                    <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Quick Actions</MudText></CardHeaderContent></MudCardHeader>
                    <MudCardContent>
                        <MudStack Spacing="2">
                            <MudButton OnClick="@NavigateToAnalytics" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">View Analytics</MudButton>
                            <MudButton OnClick="@NavigateToAlerts" Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true">Manage Alerts</MudButton>
                            <MudButton OnClick="@NavigateToDependencies" Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true">View Dependencies</MudButton>
                        </MudStack>
                    </MudCardContent>
                </MudCard>

                <MudCard Elevation="2">
                    <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Recent Alerts</MudText></CardHeaderContent></MudCardHeader>
                    <MudCardContent>
                        <MudText Color="Color.Secondary">No recent alerts</MudText>
                    </MudCardContent>
                </MudCard>

                <HealthTrendChart Title="Health Trend"
                                  RefreshAction="@RefreshHealthTrend"
                                  Height="150px"
                                  Width="100%"
                                  DataPoints="@_dataPoints"
                                  MaxXAxisPoint="4"
                />
            </MudStack>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private HubConnection? _hubConnection;
    private Service[]? _services;
    private List<HealthDataPoint> _dataPoints = [];
    private bool _isConnected;
    private DateTime _lastUpdated = DateTime.Now;

    private int _healthyCount;
    private int _degradedCount;
    private int _criticalCount;
    private double _overallHealthScore;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        await LoadTrendData();
        await SetupSignalRConnection();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadInitialData()
    {
        try
        {
            _services = await Http.GetFromJsonAsync<Service[]>(NavigationManager.ToAbsoluteUri("/api/healthcheck/services"));
            UpdateHealthCounts();
        }
        catch (Exception ex)
        {
            Logger.LogError("Error loading initial data: {error}", ex.Message);
        }
    }
    
    private async Task LoadTrendData()
    {
        try
        {
            var trendData = await Http.GetFromJsonAsync<SystemHealthTrend>(NavigationManager.ToAbsoluteUri("/api/analytics/health-trend"));
            _dataPoints = trendData?.AggregatedDataPoints ?? [];
        }
        catch (Exception ex)
        {
            Logger.LogError("Error loading analytics data: {error}", ex.Message);
        }
    }

    private async Task SetupSignalRConnection()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notification"))
            .Build();

        _hubConnection.On<string, HealthCheckResult>("ReceiveNotification", (id, checkResult) =>
        {
            if (_services == null) return;
            var index = Array.FindIndex(_services, s => s.Id == id);
            if (index < 0) return;
            var service = _services[index] with { LastCheckStatus = checkResult };
            _services[index] = service;
            UpdateHealthCounts();
            _lastUpdated = DateTime.Now;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await _hubConnection.StartAsync();
            _isConnected = _hubConnection.State == HubConnectionState.Connected;
        }
        catch (Exception ex)
        {
            _isConnected = false;
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }
    }

    private void UpdateHealthCounts()
    {
        if (_services == null) return;

        _healthyCount = _services.Count(s => s.LastCheckStatus.Status == Status.Healthy);
        _degradedCount = _services.Count(s => s.LastCheckStatus.Status == Status.Degraded);
        _criticalCount = _services.Count(s => s.LastCheckStatus.Status == Status.Critical);
        
        _overallHealthScore = _services.Length > 0 ? (double)_healthyCount / _services.Length * 100 : 0;
    }

    private Color GetStatusColor(Status status)
    {
        return status switch
        {
            Status.Healthy => Color.Success,
            Status.Degraded => Color.Warning,
            Status.Critical => Color.Error,
            _ => Color.Default
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private void NavigateToService(string serviceId) => NavigationManager.NavigateTo($"/services/{serviceId}");
    
    private void NavigateToAnalytics() => NavigationManager.NavigateTo("/analytics");
    
    private void NavigateToAlerts() => NavigationManager.NavigateTo("/alerts");
    
    private void NavigateToDependencies() => NavigationManager.NavigateTo("/dependencies");
    
    private async Task RefreshHealthTrend()
    {
        await LoadTrendData();
    }
}
