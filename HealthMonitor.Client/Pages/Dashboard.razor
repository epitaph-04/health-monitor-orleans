@page "/"
@using HealthMonitor.Client.Components
@using HealthMonitor.Client.Model
@using HealthMonitor.Client.Service
@using HealthMonitor.Model
@inject DashboardService DashboardService
@inject ISnackbar Snackbar
@implements IDisposable

<PageTitle>Health Monitoring Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <!-- Dashboard Header -->
    <MudGrid>
        <MudItem xs="12">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudIcon Icon="Icons.Material.Filled.MonitorHeart" Size="Size.Large" Color="Color.Primary" />
                    <MudText Typo="Typo.h4" Color="Color.Primary">Health Monitoring Dashboard</MudText>
                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Variant="Variant.Filled">
                        Live
                    </MudChip>
                </MudStack>
                
                <MudStack Row>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="Icons.Material.Filled.Refresh"
                              OnClick="@RefreshAllData"
                              Disabled="@_isRefreshing">
                        @if (_isRefreshing)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <MudText>Refreshing...</MudText>
                        }
                        else
                        {
                            <MudText>Refresh All</MudText>
                        }
                    </MudButton>
                    
                    <MudButton Variant="Variant.Outlined" 
                              StartIcon="Icons.Material.Filled.Settings"
                              OnClick="@(() => _settingsDialog = true)">
                        Settings
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudItem>
    </MudGrid>

    <!-- System Overview Cards -->
    <MudGrid Class="mt-4">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="4">
                <MudCardContent>
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudStack>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Overall System Health</MudText>
                            <MudText Typo="Typo.h4" Color="@GetHealthColor(_systemOverview?.OverallSystemHealth ?? 0)">
                                @($"{_systemOverview?.OverallSystemHealth ?? 0:F1}%")
                            </MudText>
                        </MudStack>
                        <MudIcon Icon="Icons.Material.Filled.HealthAndSafety" 
                                Size="Size.Large" 
                                Color="@GetHealthColor(_systemOverview?.OverallSystemHealth ?? 0)" />
                    </MudStack>
                    <MudProgressLinear Value="@(_systemOverview?.OverallSystemHealth ?? 0)" 
                                      Color="@GetHealthColor(_systemOverview?.OverallSystemHealth ?? 0)" 
                                      Class="mt-2" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="4">
                <MudCardContent>
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudStack>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Healthy Services</MudText>
                            <MudText Typo="Typo.h4" Color="Color.Success">
                                @($"{_systemOverview?.HealthyServices ?? 0}/{_systemOverview?.TotalServices ?? 0}")
                            </MudText>
                        </MudStack>
                        <MudIcon Icon="Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" />
                    </MudStack>
                    <MudProgressLinear Value="@GetServiceHealthPercentage()" Color="Color.Success" Class="mt-2" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="4">
                <MudCardContent>
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudStack>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Critical Alerts</MudText>
                            <MudText Typo="Typo.h4" Color="Color.Error">
                                @(_systemOverview?.Alerts?.Count(a => a.Severity == AlertSeverity.Critical) ?? 0)
                            </MudText>
                        </MudStack>
                        <MudIcon Icon="Icons.Material.Filled.Warning" Size="Size.Large" Color="Color.Error" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="4">
                <MudCardContent>
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudStack>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Auto-Refresh</MudText>
                            <MudText Typo="Typo.body1">
                                @(_autoRefreshEnabled ? $"Every {_refreshInterval}s" : "Disabled")
                            </MudText>
                        </MudStack>
                        <MudSwitch T="bool" @bind-Checked="@_autoRefreshEnabled" 
                                  Color="Color.Primary"
                                  UnCheckedColor="Color.Default" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Main Dashboard Content -->
    <MudGrid Class="mt-4">
        <!-- Left Panel - Service Selection and Filters -->
        <MudItem xs="12" md="3">
            <MudCard Elevation="4" Style="height: 600px;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Services & Filters</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="Icons.Material.Filled.FilterList" Color="Color.Primary" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Style="height: calc(100% - 80px); overflow-y: auto;">
                    <!-- Time Range Selector -->
                    <MudStack Class="mb-4">
                        <MudText Typo="Typo.subtitle2">Time Range</MudText>
                        <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                            <MudButton OnClick="@(() => SetTimeRange(1))" 
                                      Variant="@(_selectedHours == 1 ? Variant.Filled : Variant.Outlined)">
                                1H
                            </MudButton>
                            <MudButton OnClick="@(() => SetTimeRange(24))" 
                                      Variant="@(_selectedHours == 24 ? Variant.Filled : Variant.Outlined)">
                                24H
                            </MudButton>
                            <MudButton OnClick="@(() => SetTimeRange(168))" 
                                      Variant="@(_selectedHours == 168 ? Variant.Filled : Variant.Outlined)">
                                7D
                            </MudButton>
                            <MudButton OnClick="@(() => SetTimeRange(720))" 
                                      Variant="@(_selectedHours == 720 ? Variant.Filled : Variant.Outlined)">
                                30D
                            </MudButton>
                        </MudButtonGroup>
                    </MudStack>

                    <!-- Service Filter -->
                    <MudStack>
                        <MudText Typo="Typo.subtitle2">Services</MudText>
                        <MudTextField @bind-Value="_serviceSearchText" 
                                     Placeholder="Search services..." 
                                     Adornment="Adornment.Start" 
                                     AdornmentIcon="Icons.Material.Filled.Search"
                                     Immediate="true" />
                        
                        <MudList T="string" Dense>
                            @foreach (var service in FilteredServices)
                            {
                                <MudListItem>
                                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudCheckBox @bind-Checked="service.IsSelected" 
                                                    Color="Color.Primary"
                                                    Dense="true" 
                                                    Label="@service.ServiceId" />
                                        <MudChip T="string" Size="Size.Small" 
                                                Color="@service.StatusColor" 
                                                Variant="Variant.Filled">
                                            @GetServiceStatusText(service.ServiceId)
                                        </MudChip>
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Center Panel - Main Charts -->
        <MudItem xs="12" md="6">
            <MudStack>
                <!-- Health Trend Chart -->
                <MudCard Elevation="4" Style="height: 300px;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Health Trends Over Time</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudMenu Icon="Icons.Material.Filled.MoreVert">
                                <MudMenuItem OnClick="ExportHealthTrendChart">Export Chart</MudMenuItem>
                                <MudMenuItem OnClick="@(() => _showHealthTrendFullscreen = true)">Fullscreen</MudMenuItem>
                            </MudMenu>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Style="height: calc(100% - 80px);">
                        <HealthTrendChart Data="@_healthTrendChartData" Height="200" />
                    </MudCardContent>
                </MudCard>

                <!-- Response Time Chart -->
                <MudCard Elevation="4" Style="height: 280px;" Class="mt-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Response Time Trends</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Style="height: calc(100% - 80px);">
                        <ResponseTimeChart Data="@_responseTimeChartData" Height="180" />
                    </MudCardContent>
                </MudCard>
            </MudStack>
        </MudItem>

        <!-- Right Panel - Alerts and Insights -->
        <MudItem xs="12" md="3">
            <MudStack>
                <!-- System Alerts -->
                <MudCard Elevation="4" Style="height: 280px;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">System Alerts</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudBadge Content="@(_systemOverview?.Alerts?.Count ?? 0)" 
                                     Color="Color.Error" Overlap="true" Bordered="true">
                                <MudIcon Icon="Icons.Material.Filled.Notifications" />
                            </MudBadge>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Style="height: calc(100% - 80px); overflow-y: auto;">
                        @if (_systemOverview?.Alerts?.Any() == true)
                        {
                            <MudList T="string" Dense>
                                @foreach (var alert in _systemOverview.Alerts.Take(10))
                                {
                                    <MudListItem>
                                        <MudStack>
                                            <MudStack Row AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@GetAlertIcon(alert.Severity)" 
                                                        Color="@GetAlertColor(alert.Severity)" 
                                                        Size="Size.Small" />
                                                <MudText Typo="Typo.body2" Style="font-weight: bold;">
                                                    @alert.ServiceId
                                                </MudText>
                                                <MudSpacer />
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    @alert.DetectedAt.ToString("HH:mm")
                                                </MudText>
                                            </MudStack>
                                            <MudText Typo="Typo.body2" Style="margin-left: 24px;">
                                                @alert.Message
                                            </MudText>
                                        </MudStack>
                                    </MudListItem>
                                    <MudDivider />
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%;">
                                <MudIcon Icon="Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" />
                                <MudText Typo="Typo.body1" Color="Color.Success">All systems healthy</MudText>
                            </MudStack>
                        }
                    </MudCardContent>
                </MudCard>

                <!-- Top Services -->
                <MudCard Elevation="4" Style="height: 300px;" Class="mt-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Service Rankings</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Style="height: calc(100% - 80px); overflow-y: auto;">
                        <ServiceRankingList Rankings="@_serviceRankings" />
                    </MudCardContent>
                </MudCard>
            </MudStack>
        </MudItem>
    </MudGrid>

    <!-- Service Details Tabs -->
    <MudCard Elevation="4" Class="mt-4">
        <MudCardContent>
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="Detailed Analysis">
                    <ServiceDetailedAnalysis SelectedServices="@GetSelectedServices()" TimeRangeHours="@_selectedHours" />
                </MudTabPanel>
                
                <MudTabPanel Text="Anomaly Detection">
                    <AnomalyDetectionPanel SelectedServices="@GetSelectedServices()" TimeRangeHours="@_selectedHours" />
                </MudTabPanel>
                
                <MudTabPanel Text="SLA Compliance">
                    <SlaCompliancePanel SelectedServices="@GetSelectedServices()" />
                </MudTabPanel>
                
                <MudTabPanel Text="Predictions">
                    <PredictionsPanel SelectedServices="@GetSelectedServices()" />
                </MudTabPanel>
            </MudTabs>
        </MudCardContent>
    </MudCard>
</MudContainer>

<!-- Dialogs -->
<SettingsDialog RefreshInterval="@_refreshInterval"
                OnRefreshIntervalChanged="@UpdateRefreshInterval" />

<FullscreenChartDialog Title="Health Trends - Fullscreen"
                       ChartData="@_healthTrendChartData" />

@code {
    private SystemHealthOverview? _systemOverview;
    private List<ServiceFilter> _serviceFilters = new();
    private readonly List<ChartData> _healthTrendChartData = new();
    private readonly List<ChartData> _responseTimeChartData = new();
    private List<ServiceRanking> _serviceRankings = new();
    
    private bool _isRefreshing;
    private bool _autoRefreshEnabled = true;
    private int _refreshInterval = 30;
    private int _selectedHours = 24;
    private string _serviceSearchText = "";
    
    private bool _settingsDialog;
    private bool _showHealthTrendFullscreen;
    
    private System.Timers.Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        SetupAutoRefresh();
    }

    private async Task LoadInitialData()
    {
        try
        {
            _systemOverview = await DashboardService.GetSystemOverviewAsync();
            await LoadServiceFilters();
            await LoadChartData();
            await LoadServiceRankings();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading dashboard data: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadServiceFilters()
    {
        var knownServices = await DashboardService.GetAllServices();
        _serviceFilters = knownServices.Select(service => new ServiceFilter
        {
            ServiceId = service.Id,
            IsSelected = true,
            StatusColor = GetRandomServiceColor()
        }).ToList();
    }

    private async Task LoadChartData()
    {
        _healthTrendChartData.Clear();
        _responseTimeChartData.Clear();

        foreach (var service in _serviceFilters.Where(s => s.IsSelected))
        {
            try
            {
                var trendHistory = await DashboardService.GetServiceTrendHistoryAsync(service.ServiceId, 24);
                
                foreach (var trend in trendHistory)
                {
                    _healthTrendChartData.Add(new ChartData
                    {
                        Time = trend.CalculatedAt,
                        Value = trend.OverallHealthScore,
                        Label = service.ServiceId,
                        Color = GetServiceColor(service.ServiceId)
                    });
                    
                    _responseTimeChartData.Add(new ChartData
                    {
                        Time = trend.CalculatedAt,
                        Value = trend.AverageResponseTime.TotalMilliseconds,
                        Label = service.ServiceId,
                        Color = GetServiceColor(service.ServiceId)
                    });
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data for {service.ServiceId}: {ex.Message}");
            }
        }

        StateHasChanged();
    }

    private async Task LoadServiceRankings()
    {
        var selectedServices = GetSelectedServices();
        if (selectedServices.Any())
        {
            try
            {
                var comparison = await DashboardService.CompareServicesAsync(selectedServices, _selectedHours);
                _serviceRankings = comparison.ServiceComparisons.Select(sc => new ServiceRanking
                {
                    ServiceId = sc.ServiceId,
                    Rank = sc.HealthRank,
                    HealthScore = sc.TrendData.OverallHealthScore,
                    Availability = sc.TrendData.AvailabilityPercentage,
                    Trend = sc.TrendData.HealthTrend
                }).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading service rankings: {ex.Message}");
            }
        }
    }

    private async Task RefreshAllData()
    {
        _isRefreshing = true;
        StateHasChanged();

        try
        {
            await DashboardService.RefreshAllTrendsAsync();
            await LoadInitialData();
            Snackbar.Add("Dashboard refreshed successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error refreshing data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task SetTimeRange(int hours)
    {
        if (_selectedHours != hours)
        {
            _selectedHours = hours;
            await LoadChartData();
            await LoadServiceRankings();
        }
    }

    private void SetupAutoRefresh()
    {
        _refreshTimer = new System.Timers.Timer(_refreshInterval * 1000);
        _refreshTimer.Elapsed += async (sender, e) =>
        {
            if (_autoRefreshEnabled)
            {
                await InvokeAsync(async () =>
                {
                    await LoadInitialData();
                    StateHasChanged();
                });
            }
        };
        _refreshTimer.Start();
    }

    private void UpdateRefreshInterval(int newInterval)
    {
        _refreshInterval = newInterval;
        _refreshTimer?.Dispose();
        SetupAutoRefresh();
    }

    private List<ServiceFilter> FilteredServices => 
        _serviceFilters.Where(s => string.IsNullOrEmpty(_serviceSearchText) || 
                                  s.ServiceId.Contains(_serviceSearchText, StringComparison.OrdinalIgnoreCase)).ToList();

    private List<string> GetSelectedServices() => 
        _serviceFilters.Where(s => s.IsSelected).Select(s => s.ServiceId).ToList();

    private Color GetHealthColor(double healthScore)
    {
        return healthScore switch
        {
            >= 95 => Color.Success,
            >= 85 => Color.Warning,
            _ => Color.Error
        };
    }

    private double GetServiceHealthPercentage()
    {
        if (_systemOverview?.TotalServices == 0) return 0;
        return (_systemOverview?.HealthyServices ?? 0) * 100.0 / (_systemOverview?.TotalServices ?? 1);
    }

    private Color GetRandomServiceColor() => 
        new[] { Color.Primary, Color.Secondary, Color.Tertiary, Color.Info, Color.Success }[Random.Shared.Next(5)];
    

    private string GetServiceColor(string serviceId) => 
        serviceId.GetHashCode() % 2 == 0 ? "#2196F3" : "#4CAF50";

    private string GetServiceStatusText(string serviceId) => "Online"; // Simplified

    private Color GetAlertColor(AlertSeverity severity) => severity switch
    {
        AlertSeverity.Critical => Color.Error,
        AlertSeverity.Warning => Color.Warning,
        _ => Color.Info
    };

    private string GetAlertIcon(AlertSeverity severity) => severity switch
    {
        AlertSeverity.Critical => Icons.Material.Filled.Error,
        AlertSeverity.Warning => Icons.Material.Filled.Warning,
        _ => Icons.Material.Filled.Info
    };

    private Task ExportHealthTrendChart()
    {
        // Implementation for chart export
        Snackbar.Add("Chart export feature would be implemented here", Severity.Info);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}