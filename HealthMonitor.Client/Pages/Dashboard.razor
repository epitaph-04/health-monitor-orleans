@page "/"
@using HealthMonitor.Client.Components
@using HealthMonitor.Client.Model
@using HealthMonitor.Client.Service
@using HealthMonitor.Model
@inject DashboardService DashboardService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Health Monitoring Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-2">
    <!-- Dashboard Header -->
    <MudGrid Class="mb-2">
        <MudItem xs="12">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="py-2">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="Icons.Material.Filled.MonitorHeart" Size="Size.Medium" Color="Color.Primary" />
                    <MudText Typo="Typo.h5" Color="Color.Primary">Health Monitoring Dashboard</MudText>
                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Variant="Variant.Filled">
                        Live
                    </MudChip>
                </MudStack>

                <MudButton Variant="Variant.Filled"
                          Color="Color.Primary"
                          StartIcon="Icons.Material.Filled.Refresh"
                          OnClick="@RefreshAllData"
                          Disabled="@_isRefreshing"
                          Size="Size.Small">
                    @if (_isRefreshing)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <MudText>Refreshing...</MudText>
                    }
                    else
                    {
                        <MudText>Refresh All</MudText>
                    }
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    <!-- System Overview Cards -->
    <MudGrid Class="mb-3">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="4" Style="height: 120px;">
                <MudCardContent Class="pa-4" Style="height: 100%; display: flex; flex-direction: column;">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="mb-2">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Overall System Health</MudText>
                            <MudText Typo="Typo.h5" Color="@GetHealthColor(_systemOverview?.OverallSystemHealth ?? 0)">
                                @($"{_systemOverview?.OverallSystemHealth ?? 0:F1}%")
                            </MudText>
                        </MudStack>
                        <MudIcon Icon="Icons.Material.Filled.HealthAndSafety"
                                Size="Size.Medium"
                                Color="@GetHealthColor(_systemOverview?.OverallSystemHealth ?? 0)" />
                    </MudStack>
                    <MudProgressLinear Value="@(_systemOverview?.OverallSystemHealth ?? 0)"
                                      Color="@GetHealthColor(_systemOverview?.OverallSystemHealth ?? 0)"
                                      Size="Size.Small"
                                      Style="width: 100%;" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="4" Style="height: 120px;">
                <MudCardContent Class="pa-4" Style="height: 100%; display: flex; flex-direction: column;">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="mb-2">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Healthy Services</MudText>
                            <MudText Typo="Typo.h5" Color="Color.Success">
                                @($"{_systemOverview?.HealthyServices ?? 0}/{_systemOverview?.TotalServices ?? 0}")
                            </MudText>
                        </MudStack>
                        <MudIcon Icon="Icons.Material.Filled.CheckCircle" Size="Size.Medium" Color="Color.Success" />
                    </MudStack>
                    <MudProgressLinear Value="@GetServiceHealthPercentage()"
                                      Color="Color.Success"
                                      Size="Size.Small"
                                      Style="width: 100%;" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="4" Style="height: 120px;">
                <MudCardContent Class="pa-4" Style="height: 100%;">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="height: 100%;">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Critical Alerts</MudText>
                            <MudText Typo="Typo.h5" Color="Color.Error">
                                @(_systemOverview?.Alerts?.Count(a => a.Severity == AlertSeverity.Critical) ?? 0)
                            </MudText>
                        </MudStack>
                        <MudIcon Icon="Icons.Material.Filled.Warning" Size="Size.Medium" Color="Color.Error" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="4" Style="height: 120px;">
                <MudCardContent Class="pa-4" Style="height: 100%;">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="height: 100%;">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Auto-Refresh</MudText>
                            <MudText Typo="Typo.body1">
                                @(_autoRefreshEnabled ? $"Every {_refreshInterval}s" : "Disabled")
                            </MudText>
                        </MudStack>
                        <MudSwitch T="bool" @bind-Checked="@_autoRefreshEnabled"
                                  Color="Color.Primary"
                                  UnCheckedColor="Color.Default"
                                  Size="Size.Small" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Top Row: Health Trend Chart and Quick Actions -->
    <MudGrid AlignItems="AlignItems.Stretch">
        <!-- Quick Health Trend -->
        <MudItem xs="12" lg="9">
            <MudCard Elevation="4" Style="height: 400px; display: flex; flex-direction: column;">
                <MudCardHeader Class="pb-2" Style="flex-shrink: 0; min-height: 50px;">
                    <CardHeaderContent>
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="Icons.Material.Filled.TrendingUp" Color="Color.Success" Size="Size.Small" />
                            <MudText Typo="Typo.subtitle1">System Health Trend</MudText>
                        </MudStack>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton Href="/analytics/trends"
                                  StartIcon="Icons.Material.Filled.Analytics"
                                  Size="Size.Small"
                                  Color="Color.Primary"
                                  Variant="Variant.Text">
                            Full Analysis
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Style="flex: 1; display: flex; flex-direction: column; padding-top: 8px;">
                    @if (_healthTrendChartData.Any())
                    {
                        <HealthTrendChart Data="@_healthTrendChartData" Height="300" />
                    }
                    else
                    {
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%;">
                            <MudIcon Icon="Icons.Material.Filled.Timeline" Size="Size.Large" Color="Color.Secondary" />
                            <MudText Typo="Typo.h6">No Trend Data Available</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center">Trend data will appear once services have sufficient history</MudText>
                        </MudStack>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Quick Actions -->
        <MudItem xs="12" lg="3">
            <MudCard Elevation="4" Style="height: 400px; display: flex; flex-direction: column;">
                <MudCardHeader Class="pb-2" Style="flex-shrink: 0; min-height: 50px;">
                    <CardHeaderContent>
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="Icons.Material.Filled.Speed" Color="Color.Primary" Size="Size.Small" />
                            <MudText Typo="Typo.subtitle1">Quick Actions</MudText>
                        </MudStack>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Style="flex: 1; display: flex; flex-direction: column; padding-top: 8px;">
                    <MudStack Spacing="3" Style="height: 100%;">
                        <MudButton FullWidth="true"
                                  Variant="Variant.Filled"
                                  StartIcon="Icons.Material.Filled.Analytics"
                                  Href="/analytics"
                                  Color="Color.Primary"
                                  Class="pa-4"
                                  Size="Size.Large">
                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                <MudText Typo="Typo.body1">View Analytics</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Surface">Comprehensive insights</MudText>
                            </MudStack>
                        </MudButton>

                        <MudButton FullWidth="true"
                                  Variant="Variant.Outlined"
                                  StartIcon="Icons.Material.Filled.Notifications"
                                  OnClick="@ShowAlertsDialog"
                                  Color="Color.Warning"
                                  Class="pa-4"
                                  Size="Size.Large">
                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                <MudText Typo="Typo.body1">View Alerts</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@(_systemOverview?.Alerts?.Count ?? 0) active</MudText>
                            </MudStack>
                        </MudButton>

                        <MudButton FullWidth="true"
                                  Variant="Variant.Outlined"
                                  StartIcon="Icons.Material.Filled.Settings"
                                  OnClick="@(() => { _settingsDialog = true; StateHasChanged(); })"
                                  Color="Color.Tertiary"
                                  Class="pa-4"
                                  Size="Size.Large">
                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                <MudText Typo="Typo.body1">Settings</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Configure monitoring</MudText>
                            </MudStack>
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Bottom Row: System Alerts and Service Rankings -->
    <MudGrid AlignItems="AlignItems.Stretch" Class="mt-3">
        <!-- System Alerts -->
        <MudItem xs="12" lg="6">
            <MudCard Elevation="4" Style="height: 400px; display: flex; flex-direction: column;">
                <MudCardHeader Class="pb-2" Style="flex-shrink: 0; min-height: 50px;">
                    <CardHeaderContent>
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="Icons.Material.Filled.Notifications" Color="Color.Error" Size="Size.Small" />
                            <MudText Typo="Typo.subtitle1">System Alerts</MudText>
                            <MudBadge Content="@(_systemOverview?.Alerts?.Count ?? 0)"
                                     Color="Color.Error" Overlap="true" Bordered="true">
                            </MudBadge>
                        </MudStack>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton Href="/analytics/insights"
                                  StartIcon="Icons.Material.Filled.Analytics"
                                  Size="Size.Small"
                                  Color="Color.Primary"
                                  Variant="Variant.Text">
                            View All
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Style="flex: 1; overflow-y: auto; padding-top: 8px;">
                    @if (_systemOverview?.Alerts?.Any() == true)
                    {
                        <MudList T="string" Dense Class="pa-0">
                            @foreach (var alert in _systemOverview.Alerts.Take(10))
                            {
                                <MudListItem Class="px-2 py-1">
                                    <MudStack Spacing="1">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                            <MudIcon Icon="@GetAlertIcon(alert.Severity)"
                                                    Color="@GetAlertColor(alert.Severity)"
                                                    Size="Size.Small" />
                                            <MudText Typo="Typo.body2" Style="font-weight: 500;">
                                                @alert.ServiceId
                                            </MudText>
                                            <MudSpacer />
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @alert.DetectedAt.ToString("HH:mm")
                                            </MudText>
                                        </MudStack>
                                        <MudText Typo="Typo.body2" Style="margin-left: 20px; color: var(--mud-palette-text-secondary);">
                                            @alert.Message
                                        </MudText>
                                    </MudStack>
                                </MudListItem>
                                <MudDivider />
                            }
                        </MudList>
                    }
                    else
                    {
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%;">
                            <MudIcon Icon="Icons.Material.Filled.CheckCircle" Size="Size.Medium" Color="Color.Success" />
                            <MudText Typo="Typo.subtitle1" Color="Color.Success">All Systems Healthy</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">No active alerts detected</MudText>
                        </MudStack>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Service Rankings -->
        <MudItem xs="12" lg="6">
            <MudCard Elevation="4" Style="height: 400px; display: flex; flex-direction: column;">
                <MudCardHeader Class="pb-2" Style="flex-shrink: 0; min-height: 50px;">
                    <CardHeaderContent>
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="Icons.Material.Filled.Leaderboard" Color="Color.Primary" Size="Size.Small" />
                            <MudText Typo="Typo.subtitle1">Top Performing Services</MudText>
                        </MudStack>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton Href="/analytics/services"
                                  StartIcon="Icons.Material.Filled.Hub"
                                  Size="Size.Small"
                                  Color="Color.Primary"
                                  Variant="Variant.Text">
                            Details
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Style="flex: 1; overflow-y: auto; padding-top: 8px;">
                    <ServiceRankingList Rankings="@_serviceRankings" />
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- Dialogs -->
<SettingsDialog IsOpen="_settingsDialog"
                RefreshInterval="@_refreshInterval"
                OnRefreshIntervalChanged="@UpdateRefreshInterval" />

@code {
    private SystemHealthOverview? _systemOverview;
    private readonly List<ChartData> _healthTrendChartData = new();
    private List<ServiceRanking> _serviceRankings = new();

    private bool _isRefreshing;
    private bool _autoRefreshEnabled = true;
    private int _refreshInterval = 30;

    private bool _settingsDialog;

    private System.Timers.Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        SetupAutoRefresh();
    }

    private async Task LoadInitialData()
    {
        try
        {
            await Task.WhenAll(
                LoadSystemOverview(),
                LoadQuickHealthTrend(),
                LoadServiceRankings()
            );
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading dashboard data: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadSystemOverview()
    {
        try
        {
            _systemOverview = await DashboardService.GetSystemOverviewAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading system overview: {ex.Message}", Severity.Warning);
        }
    }

    private async Task LoadQuickHealthTrend()
    {
        _healthTrendChartData.Clear();

        try
        {
            // Get all services for overview trend
            var services = await DashboardService.GetAllServices();
            var selectedServices = services.Take(3).ToList(); // Show trend for top 3 services

            if (selectedServices.Any())
            {
                var chartDataTasks = selectedServices.Select(async service =>
                {
                    try
                    {
                        var trendHistory = await DashboardService.GetServiceTrendHistoryAsync(service.Id, 24);

                        // Only use real trend history if available
                        if (trendHistory.Any())
                        {
                            return trendHistory.Select(trend => new ChartData
                            {
                                Time = trend.CalculatedAt,
                                Value = trend.OverallHealthScore,
                                Label = service.Id,
                                Color = GetServiceColor(service.Id)
                            }).ToList();
                        }
                        else
                        {
                            return new List<ChartData>();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error loading trend for service {service.Id}: {ex.Message}");
                        return new List<ChartData>();
                    }
                });

                var results = await Task.WhenAll(chartDataTasks);
                foreach (var result in results)
                {
                    _healthTrendChartData.AddRange(result);
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading health trend: {ex.Message}", Severity.Warning);
        }
    }

    private async Task LoadServiceRankings()
    {
        try
        {
            // Get all services for rankings
            var services = await DashboardService.GetAllServices();
            var serviceIds = services.Select(s => s.Id).ToList();

            if (serviceIds.Any())
            {
                var comparison = await DashboardService.CompareServicesAsync(serviceIds, 24);
                _serviceRankings = comparison.ServiceComparisons.Take(5).Select(sc => new ServiceRanking
                {
                    ServiceId = sc.ServiceId,
                    Rank = sc.HealthRank,
                    HealthScore = sc.TrendData.OverallHealthScore,
                    Availability = sc.TrendData.AvailabilityPercentage,
                    Trend = sc.TrendData.HealthTrend
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading service rankings: {ex.Message}", Severity.Warning);
            _serviceRankings.Clear();
        }
    }

    private async Task RefreshAllData()
    {
        if (_isRefreshing) return; // Prevent multiple simultaneous refreshes

        _isRefreshing = true;
        StateHasChanged();

        try
        {
            // First trigger the refresh on the backend
            await DashboardService.RefreshAllTrendsAsync();

            // Wait a moment for the refresh to propagate
            await Task.Delay(1000);

            // Then reload all data
            await LoadInitialData();

            Snackbar.Add("Dashboard refreshed successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error refreshing data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isRefreshing = false;
            StateHasChanged();
        }
    }


    private void SetupAutoRefresh()
    {
        _refreshTimer = new System.Timers.Timer(_refreshInterval * 1000);
        _refreshTimer.Elapsed += async (sender, e) =>
        {
            if (_autoRefreshEnabled && !_isRefreshing)
            {
                try
                {
                    await InvokeAsync(async () =>
                    {
                        // Only refresh system overview and rankings during auto-refresh
                        // Full refresh is too expensive for frequent auto-refresh
                        await Task.WhenAll(
                            LoadSystemOverview(),
                            LoadServiceRankings()
                        );
                        StateHasChanged();
                    });
                }
                catch (Exception ex)
                {
                    // Log but don't show snackbar during auto-refresh
                    Console.WriteLine($"Auto-refresh failed: {ex.Message}");
                }
            }
        };
        _refreshTimer.Start();
    }

    private void UpdateRefreshInterval(int newInterval)
    {
        _refreshInterval = newInterval;
        _refreshTimer?.Dispose();
        SetupAutoRefresh();
    }


    private Color GetHealthColor(double healthScore)
    {
        return healthScore switch
        {
            >= 95 => Color.Success,
            >= 85 => Color.Warning,
            _ => Color.Error
        };
    }

    private double GetServiceHealthPercentage()
    {
        if (_systemOverview?.TotalServices == 0) return 0;
        return (_systemOverview?.HealthyServices ?? 0) * 100.0 / (_systemOverview?.TotalServices ?? 1);
    }

    private Color GetRandomServiceColor() =>
        new[] { Color.Primary, Color.Secondary, Color.Tertiary, Color.Info, Color.Success }[Math.Abs(DateTime.Now.Millisecond) % 5];
    
    private string GetServiceColor(string serviceId) => 
        serviceId.GetHashCode() % 2 == 0 ? "#2196F3" : "#4CAF50";

    private string GetServiceStatusText(string serviceId) => "Online";

    private Color GetAlertColor(AlertSeverity severity) => severity switch
    {
        AlertSeverity.Critical => Color.Error,
        AlertSeverity.Warning => Color.Warning,
        _ => Color.Info
    };

    private string GetAlertIcon(AlertSeverity severity) => severity switch
    {
        AlertSeverity.Critical => Icons.Material.Filled.Error,
        AlertSeverity.Warning => Icons.Material.Filled.Warning,
        _ => Icons.Material.Filled.Info
    };

    private Task ExportHealthTrendChart()
    {
        Snackbar.Add("Chart export feature would be implemented here", Severity.Info);
        return Task.CompletedTask;
    }

    private void NavigateToAnalytics()
    {
        Navigation.NavigateTo("/analytics");
    }

    private void ShowAlertsDialog()
    {
        if (_systemOverview?.Alerts?.Any() == true)
        {
            var alertCount = _systemOverview.Alerts.Count;
            var criticalCount = _systemOverview.Alerts.Count(a => a.Severity == AlertSeverity.Critical);

            var message = $"Found {alertCount} active alerts";
            if (criticalCount > 0)
            {
                message += $" ({criticalCount} critical)";
            }

            // Show top 3 alerts in snackbars
            var topAlerts = _systemOverview.Alerts
                .OrderByDescending(a => a.Severity)
                .ThenByDescending(a => a.DetectedAt)
                .Take(3);

            foreach (var alert in topAlerts)
            {
                var severity = alert.Severity == AlertSeverity.Critical ? Severity.Error : Severity.Warning;
                Snackbar.Add($"{alert.ServiceId}: {alert.Message}", severity);
            }

            if (alertCount > 3)
            {
                Snackbar.Add($"And {alertCount - 3} more alerts...", Severity.Info);
            }
        }
        else
        {
            Snackbar.Add("No active alerts to display", Severity.Success);
        }
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}