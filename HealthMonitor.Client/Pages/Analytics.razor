@page "/analytics"
@using HealthMonitor.Client.Components
@using HealthMonitor.Model.Analytics
@inject ILogger<Analytics> Logger
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Health Monitor - Analytics</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8">

    <!-- Header -->
    <MudPaper Elevation="1" Class="d-flex justify-space-between align-center pa-4 mb-8" Color="Color.Transparent">
        <MudText Typo="Typo.h4" GutterBottom="true">Analytics & Trends</MudText>
        <MudText Typo="Typo.body2" Class="ml-4">Analysis for the last 7 days.</MudText>
    </MudPaper>

    @if (_trendData == null)
    {
        <div class="d-flex justify-center align-center" style="height: 50vh;">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else
    {
        <MudGrid Spacing="4">
            <!-- KPI Cards -->
            <MudItem xs="12" sm="6" lg="3">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <div class="d-flex">
                            <MudAvatar Color="Color.Primary" Variant="Variant.Filled">
                                <MudIcon Icon="@Icons.Material.Filled.Speed" />
                            </MudAvatar>
                            <div class="ml-4">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Current Health</MudText>
                                <MudText Typo="Typo.h5" Class="font-weight-bold">@(_trendData.CurrentOverallHealthScore) %</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" lg="3">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <div class="d-flex">
                            <MudAvatar Style="background-color: var(--mud-palette-info-lighten);" Variant="Variant.Filled">
                                <MudIcon Icon="@Icons.Material.Filled.Functions" Color="Color.Info" />
                            </MudAvatar>
                            <div class="ml-4">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">7-Day Average</MudText>
                                <MudText Typo="Typo.h5" Class="font-weight-bold">@(_trendData.AverageOverallHealthScore) %</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="12" lg="6">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <div class="d-flex">
                            <MudAvatar Style="@($"background-color: var(--mud-palette-{GetTrendColor().ToDescriptionString()}-light);")" Variant="Variant.Filled">
                                <MudIcon Icon="@GetTrendIcon()" Color="@GetTrendColor()" />
                            </MudAvatar>
                            <div class="ml-4">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Overall Trend</MudText>
                                <MudText Typo="Typo.h5" Class="font-weight-bold">@_trendData.OverallTrend</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Main Chart -->
            <MudItem xs="12">
                <HealthTrendChart Title="Health Trend"
                                  RefreshAction="@RefreshHealthTrend"
                                  Height="300px"
                                  Width="100%"
                                  DataPoints="@_dataPoints"
                />
            </MudItem>
            
            <!-- Actionable Insights -->
            <MudItem xs="12" lg="6">
                <MudCard Elevation="2" Style="height: 100%">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Top 5 Improving Services</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pa-0">
                        <MudList T="string">
                            @foreach (var service in _trendData.TopImprovingServices)
                            {
                                <MudListItem>
                                    <div class="d-flex justify-space-between w-100">
                                        <MudText>@service.ServiceId</MudText>
                                        <MudChip T="string" Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" Variant="Variant.Text" Size="Size.Small">
                                            +@service.Strength.ToString("F2")
                                        </MudChip>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" lg="6">
                <MudCard Elevation="2" Style="height: 100%">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Color="Color.Error">Top 5 Degrading Services</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (_trendData.CurrentOverallHealthScore < 95)
                            {
                                <MudButton OnClick="@ShowAnalysisDialog" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AutoAwesome">
                                    Analyze Incident
                                </MudButton>
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Class="pa-0">
                        <MudList T="string">
                            @foreach (var service in _trendData.TopDegradingServices)
                            {
                                <MudListItem>
                                    <div class="d-flex justify-space-between w-100">
                                        <MudText>@service.ServiceId</MudText>
                                        <MudChip T="string" Icon="@Icons.Material.Filled.ArrowDownward" Color="Color.Error" Variant="Variant.Text" Size="Size.Small">
                                            @service.Strength.ToString("F2")
                                        </MudChip>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private SystemHealthTrend? _trendData;
    private List<HealthDataPoint> _dataPoints = [];
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await InvokeAsync(StateHasChanged);
    }
    
    private Color GetTrendColor() 
        => _trendData?.OverallTrend switch {
            TrendDirection.Increasing => Color.Success, 
            TrendDirection.Decreasing => Color.Error, 
            _ => Color.Surface
        };

    private string GetTrendIcon() 
        => _trendData?.OverallTrend switch {
            TrendDirection.Increasing => Icons.Material.Filled.TrendingUp, 
            TrendDirection.Decreasing => Icons.Material.Filled.TrendingDown, 
            _ => Icons.Material.Filled.TrendingFlat
        };

    private async Task ShowAnalysisDialog()
    {
        if (_trendData == null) return;
        
        var parameters = new DialogParameters();
        var degradingServices = string.Join(", ", _trendData.TopDegradingServices.Select(s => s.ServiceId));
        var prompt = $"""

                                  Act as a senior Site Reliability Engineer (SRE). An automated monitoring system detected a service degradation event. 
                                  The overall system health score is currently {_trendData.CurrentOverallHealthScore:F2}%, down from a 7-day average of {_trendData.AverageOverallHealthScore:F2}%.
                                  The following services are showing a significant negative health trend: {degradingServices}.

                                  Based on this information, provide a concise incident analysis. Your response must be in clean HTML format. Use <h3> for titles, <p> for paragraphs, and an <ul> with <li> for lists.
                                  1.  <h3>Probable Root Cause Hypothesis</h3>
                                  2.  <h3>Recommended Immediate Actions</h3>
                                  3.  <h3>Draft Status Update</h3>
                      """;

        parameters.Add("Prompt", prompt);

        await DialogService.ShowAsync<AnalysisDialog>("AI Incident Analysis", parameters);
    }

    private async Task LoadData()
    {
        try
        {
            _trendData = await Http.GetFromJsonAsync<SystemHealthTrend>(NavigationManager.ToAbsoluteUri("/api/analytics/health-trend"));
            _dataPoints = _trendData?.AggregatedDataPoints ?? [];
        }
        catch (Exception ex)
        {
            Logger.LogError("Error loading analytics data. {error}", ex.Message);
        }
    }
    
    private async Task RefreshHealthTrend()
    {
        await LoadData();
    }
}
