@page "/analytics/sla"
@using HealthMonitor.Client.Components
@using HealthMonitor.Client.Model
@using HealthMonitor.Client.Service
@using HealthMonitor.Model
@inject DashboardService DashboardService
@inject ISnackbar Snackbar

<PageTitle>SLA Compliance - Health Monitor</PageTitle>

<AnalyticsLayout Title="SLA Compliance"
                Subtitle="Service Level Agreement Tracking & Monitoring"
                HeaderIcon="@Icons.Material.Filled.Assignment"
                ShowFilters="true"
                ShowExport="true"
                ShowMetricsSummary="true"
                IsLoading="@_isLoading"
                DataPointsCount="@_totalDataPoints"
                ServiceFilters="@_serviceFilters"
                SelectedHours="@_selectedHours"
                OnTimeRangeChanged="@OnTimeRangeChanged"
                OnServiceSelectionChanged="@OnServiceSelectionChanged"
                OnRefresh="@RefreshData"
                OnExport="@OnExport">

    <MudStack>
        <!-- SLA Overview Cards -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="6" Style="background: linear-gradient(135deg, #00C9FF 0%, #92FE9D 100%); color: white;">
                    <MudCardContent>
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudStack>
                                <MudText Typo="Typo.h4">@($"{_overallSlaCompliance:F1}%")</MudText>
                                <MudText Typo="Typo.body2">Overall SLA Compliance</MudText>
                            </MudStack>
                            <MudIcon Icon="Icons.Material.Filled.Assignment" Size="Size.Large" Style="opacity: 0.7;" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="6" Style="background: linear-gradient(135deg, #FC466B 0%, #3F5EFB 100%); color: white;">
                    <MudCardContent>
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudStack>
                                <MudText Typo="Typo.h4">@_servicesInCompliance</MudText>
                                <MudText Typo="Typo.body2">Services in Compliance</MudText>
                            </MudStack>
                            <MudIcon Icon="Icons.Material.Filled.CheckCircle" Size="Size.Large" Style="opacity: 0.7;" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="6" Style="background: linear-gradient(135deg, #FDBB2D 0%, #22C1C3 100%); color: white;">
                    <MudCardContent>
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudStack>
                                <MudText Typo="Typo.h4">@($"{_errorBudgetRemaining:F1}%")</MudText>
                                <MudText Typo="Typo.body2">Error Budget Remaining</MudText>
                            </MudStack>
                            <MudIcon Icon="Icons.Material.Filled.AccountBalance" Size="Size.Large" Style="opacity: 0.7;" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="6" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                    <MudCardContent>
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudStack>
                                <MudText Typo="Typo.h4">@_totalDowntime</MudText>
                                <MudText Typo="Typo.body2">Total Downtime</MudText>
                            </MudStack>
                            <MudIcon Icon="Icons.Material.Filled.Schedule" Size="Size.Large" Style="opacity: 0.7;" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- SLA Compliance Panel -->
        <MudCard Elevation="6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="Icons.Material.Filled.Assignment" Color="Color.Primary" />
                        <MudText Typo="Typo.h6">SLA Compliance Status</MudText>
                    </MudStack>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton StartIcon="Icons.Material.Filled.Settings"
                              Color="Color.Primary"
                              Variant="Variant.Text">
                        Configure SLAs
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <SlaCompliancePanel SelectedServices="@GetSelectedServices()" />
            </MudCardContent>
        </MudCard>

        <!-- Detailed SLA Metrics -->
        <MudGrid>
            <MudItem xs="12" md="8">
                <MudCard Elevation="6" Style="height: 500px;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Icon="Icons.Material.Filled.Analytics" Color="Color.Info" />
                                <MudText Typo="Typo.h6">SLA Metrics by Service</MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Style="height: calc(100% - 80px);">
                        @if (_slaMetrics.Any())
                        {
                            <MudDataGrid T="SlaMetricData" Items="@_slaMetrics" Dense="true" Height="400px">
                                <Columns>
                                    <PropertyColumn Property="x => x.ServiceName" Title="Service" />
                                    <PropertyColumn Property="x => x.TargetUptime" Title="SLA Target" Format="P2" />
                                    <PropertyColumn Property="x => x.ActualUptime" Title="Actual Uptime" Format="P2" />
                                    <PropertyColumn Property="x => x.ErrorBudget" Title="Error Budget" Format="P2" />
                                    <PropertyColumn Property="x => x.Status">
                                        <CellTemplate>
                                            <MudChip T="string" Size="Size.Small"
                                                    Color="@GetSlaStatusColor(context.Item.Status)"
                                                    Variant="Variant.Filled">
                                                @context.Item.Status
                                            </MudChip>
                                        </CellTemplate>
                                    </PropertyColumn>
                                    <PropertyColumn Property="x => x.TrendDirection">
                                        <CellTemplate>
                                            <MudIcon Icon="@GetTrendIcon(context.Item.TrendDirection)"
                                                    Color="@GetTrendColor(context.Item.TrendDirection)" />
                                        </CellTemplate>
                                    </PropertyColumn>
                                </Columns>
                            </MudDataGrid>
                        }
                        else
                        {
                            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%;">
                                <MudIcon Icon="Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Secondary" />
                                <MudText Typo="Typo.h6">No SLA data available</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Select services to view SLA metrics
                                </MudText>
                            </MudStack>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" md="4">
                <MudCard Elevation="6" Style="height: 500px;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Icon="Icons.Material.Filled.Warning" Color="Color.Warning" />
                                <MudText Typo="Typo.h6">SLA Alerts</MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Style="height: calc(100% - 80px); overflow-y: auto;">
                        @if (_slaAlerts.Any())
                        {
                            <MudStack>
                                @foreach (var alert in _slaAlerts)
                                {
                                    <MudAlert Severity="@alert.Severity" Dense="true">
                                        <MudStack>
                                            <MudText Typo="Typo.body2" Style="font-weight: bold;">@alert.ServiceName</MudText>
                                            <MudText Typo="Typo.body2">@alert.Message</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @alert.DetectedAt.ToString("MM/dd HH:mm")
                                            </MudText>
                                        </MudStack>
                                    </MudAlert>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%;">
                                <MudIcon Icon="Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" />
                                <MudText Typo="Typo.h6">All SLAs Met</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    No SLA violations detected
                                </MudText>
                            </MudStack>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Error Budget Tracking -->
        <MudCard Elevation="6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="Icons.Material.Filled.AccountBalance" Color="Color.Tertiary" />
                        <MudText Typo="Typo.h6">Error Budget Analysis</MudText>
                        <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Outlined">
                            Monthly View
                        </MudChip>
                    </MudStack>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                        <MudButton OnClick="@(() => SetBudgetPeriod("weekly"))"
                                  Variant="@(_budgetPeriod == "weekly" ? Variant.Filled : Variant.Outlined)">
                            Weekly
                        </MudButton>
                        <MudButton OnClick="@(() => SetBudgetPeriod("monthly"))"
                                  Variant="@(_budgetPeriod == "monthly" ? Variant.Filled : Variant.Outlined)">
                            Monthly
                        </MudButton>
                        <MudButton OnClick="@(() => SetBudgetPeriod("quarterly"))"
                                  Variant="@(_budgetPeriod == "quarterly" ? Variant.Filled : Variant.Outlined)">
                            Quarterly
                        </MudButton>
                    </MudButtonGroup>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    @foreach (var budget in _errorBudgets)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Elevation="2">
                                <MudCardContent>
                                    <MudStack>
                                        <MudText Typo="Typo.h6">@budget.ServiceName</MudText>
                                        <MudProgressLinear Value="@budget.UsagePercentage"
                                                          Color="@GetBudgetColor(budget.UsagePercentage)"
                                                          Class="mb-2" />
                                        <MudStack Row Justify="Justify.SpaceBetween">
                                            <MudText Typo="Typo.body2">Used: @budget.UsedBudget</MudText>
                                            <MudText Typo="Typo.body2">Remaining: @budget.RemainingBudget</MudText>
                                        </MudStack>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @($"Burn Rate: {budget.BurnRate:F1}% per day")
                                        </MudText>
                                    </MudStack>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudStack>
</AnalyticsLayout>

@code {
    private List<ServiceFilter> _serviceFilters = new();
    private List<SlaMetricData> _slaMetrics = new();
    private List<SlaAlert> _slaAlerts = new();
    private List<ErrorBudgetData> _errorBudgets = new();

    private bool _isLoading = true;
    private int _selectedHours = 24;
    private int _totalDataPoints = 0;
    private double _overallSlaCompliance = 0;
    private int _servicesInCompliance = 0;
    private double _errorBudgetRemaining = 0;
    private string _totalDowntime = "0m";
    private string _budgetPeriod = "monthly";

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            await Task.WhenAll(
                LoadServiceFilters(),
                LoadSlaMetrics(),
                LoadSlaAlerts(),
                LoadErrorBudgets()
            );

            CalculateOverallMetrics();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading SLA data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadServiceFilters()
    {
        var services = await DashboardService.GetAllServices();
        _serviceFilters = services.Select(s => new ServiceFilter
        {
            ServiceId = s.Id,
            IsSelected = true,
            StatusColor = Color.Primary
        }).ToList();
    }

    private async Task LoadSlaMetrics()
    {
        var selectedServices = GetSelectedServices();
        if (!selectedServices.Any()) return;

        try
        {
            _slaMetrics.Clear();
            // Load real SLA metrics from service trend data
            foreach (var serviceId in selectedServices)
            {
                try
                {
                    var trendData = await DashboardService.GetServiceTrendAsync(serviceId, _selectedHours);
                    var slaMetrics = trendData.SlaMetrics;

                    var errorBudget = slaMetrics.ErrorBudgetRemaining;
                    var trendDirection = trendData.HealthTrend switch
                    {
                        HealthTrendDirection.Improving => "Improving",
                        HealthTrendDirection.Declining => "Declining",
                        HealthTrendDirection.Volatile => "Unstable",
                        _ => "Stable"
                    };

                    _slaMetrics.Add(new SlaMetricData
                    {
                        ServiceName = serviceId,
                        TargetUptime = slaMetrics.TargetAvailability,
                        ActualUptime = slaMetrics.ActualAvailability,
                        ErrorBudget = errorBudget,
                        Status = slaMetrics.MeetingAvailabilitySla ? "Compliant" : "Violation",
                        TrendDirection = trendDirection
                    });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading SLA metrics for {serviceId}: {ex.Message}");
                    // Add fallback metrics
                    _slaMetrics.Add(new SlaMetricData
                    {
                        ServiceName = serviceId,
                        TargetUptime = 0.999,
                        ActualUptime = 0.95,
                        ErrorBudget = 0,
                        Status = "Unknown",
                        TrendDirection = "Unknown"
                    });
                }
            }
        }
        catch (Exception)
        {
            _slaMetrics.Clear();
        }

        await Task.CompletedTask;
    }

    private async Task LoadSlaAlerts()
    {
        _slaAlerts.Clear();

        var violatingServices = _slaMetrics.Where(m => m.Status == "Violation").ToList();

        foreach (var service in violatingServices)
        {
            _slaAlerts.Add(new SlaAlert
            {
                ServiceName = service.ServiceName,
                Message = $"SLA violation detected. Uptime: {service.ActualUptime:P2}, Target: {service.TargetUptime:P2}",
                Severity = Severity.Error,
                DetectedAt = DateTime.Now.AddMinutes(-30) // More realistic timing
            });
        }

        // Add some budget warnings
        foreach (var service in _slaMetrics.Where(m => m.ErrorBudget < 0.2))
        {
            _slaAlerts.Add(new SlaAlert
            {
                ServiceName = service.ServiceName,
                Message = "Low error budget remaining. Monitor service closely.",
                Severity = Severity.Warning,
                DetectedAt = DateTime.Now.AddMinutes(-Random.Shared.Next(0, 30))
            });
        }

        await Task.CompletedTask;
    }

    private async Task LoadErrorBudgets()
    {
        _errorBudgets.Clear();

        foreach (var metric in _slaMetrics)
        {
            var totalBudget = 100.0; // 100 error budget units
            var usedBudget = Math.Max(0, 100 * (1 - metric.ErrorBudget));
            var remainingBudget = totalBudget - usedBudget;
            var burnRate = usedBudget / 30; // Daily burn rate over 30 days

            _errorBudgets.Add(new ErrorBudgetData
            {
                ServiceName = metric.ServiceName,
                TotalBudget = totalBudget,
                UsedBudget = $"{usedBudget:F1}%",
                RemainingBudget = $"{remainingBudget:F1}%",
                UsagePercentage = usedBudget,
                BurnRate = burnRate
            });
        }

        await Task.CompletedTask;
    }

    private void CalculateOverallMetrics()
    {
        if (_slaMetrics.Any())
        {
            _overallSlaCompliance = _slaMetrics.Average(m => m.ActualUptime) * 100;
            _servicesInCompliance = _slaMetrics.Count(m => m.Status == "Compliant");
            _errorBudgetRemaining = _slaMetrics.Average(m => m.ErrorBudget) * 100;

            // Calculate total downtime (simulated)
            var totalDowntimeMinutes = _slaMetrics.Sum(m => (1 - m.ActualUptime) * 24 * 60); // Minutes in 24h
            _totalDowntime = totalDowntimeMinutes < 60 ? $"{totalDowntimeMinutes:F0}m" : $"{totalDowntimeMinutes / 60:F1}h";
        }

        _totalDataPoints = _slaMetrics.Count * _selectedHours;
    }

    private async Task OnTimeRangeChanged(int hours)
    {
        if (_selectedHours != hours)
        {
            _selectedHours = hours;
            await LoadSlaMetrics();
            await LoadSlaAlerts();
            await LoadErrorBudgets();
            CalculateOverallMetrics();
        }
    }

    private async Task OnServiceSelectionChanged(List<ServiceFilter> filters)
    {
        _serviceFilters = filters;
        await LoadSlaMetrics();
        await LoadSlaAlerts();
        await LoadErrorBudgets();
        CalculateOverallMetrics();
    }

    private async Task RefreshData()
    {
        await LoadInitialData();
        Snackbar.Add("SLA data refreshed successfully!", Severity.Success);
    }

    private Task OnExport(string format)
    {
        Snackbar.Add($"Exporting SLA report as {format.ToUpper()}...", Severity.Info);
        return Task.CompletedTask;
    }

    private void SetBudgetPeriod(string period)
    {
        _budgetPeriod = period;
        StateHasChanged();
    }

    private List<string> GetSelectedServices() =>
        _serviceFilters.Where(s => s.IsSelected).Select(s => s.ServiceId).ToList();

    private Color GetSlaStatusColor(string status) => status switch
    {
        "Compliant" => Color.Success,
        "Violation" => Color.Error,
        _ => Color.Default
    };

    private Color GetTrendColor(string trend) => trend switch
    {
        "Improving" => Color.Success,
        "Declining" => Color.Error,
        "Stable" => Color.Info,
        _ => Color.Default
    };

    private string GetTrendIcon(string trend) => trend switch
    {
        "Improving" => Icons.Material.Filled.TrendingUp,
        "Declining" => Icons.Material.Filled.TrendingDown,
        "Stable" => Icons.Material.Filled.TrendingFlat,
        _ => Icons.Material.Filled.Remove
    };

    private Color GetBudgetColor(double usagePercentage) => usagePercentage switch
    {
        <= 50 => Color.Success,
        <= 80 => Color.Warning,
        _ => Color.Error
    };

    public class SlaMetricData
    {
        public string ServiceName { get; set; } = "";
        public double TargetUptime { get; set; }
        public double ActualUptime { get; set; }
        public double ErrorBudget { get; set; }
        public string Status { get; set; } = "";
        public string TrendDirection { get; set; } = "";
    }

    public class SlaAlert
    {
        public string ServiceName { get; set; } = "";
        public string Message { get; set; } = "";
        public Severity Severity { get; set; }
        public DateTime DetectedAt { get; set; }
    }

    public class ErrorBudgetData
    {
        public string ServiceName { get; set; } = "";
        public double TotalBudget { get; set; }
        public string UsedBudget { get; set; } = "";
        public string RemainingBudget { get; set; } = "";
        public double UsagePercentage { get; set; }
        public double BurnRate { get; set; }
    }
}